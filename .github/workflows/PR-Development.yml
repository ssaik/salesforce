# Unique name for this workflow
name: Validate PR on integration branch

# Definition when the workflow should run
on:
    pull_request:
      # This workflow will run when a pull request is opened, or when a commit is pushed
      # to a branch that has an existing pull request
      types: [opened, synchronize]
      branches: [ dev ]
      # We only care about changes to the force-app directory. This prevents the job from running
      # when changing non-salesforce files (like this yml file).
      paths:
        - 'force-app/**'
            

# Jobs to be executed
jobs:
    validate-deployment-on-integration-org:
        runs-on: ubuntu-latest
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
            # Install nodejs
            - uses: actions/setup-node@v2
              with:
                node-version: '14'

            # - uses: actions/github-script@v5
            #   with:
            #     github-token: ${{secrets.GITHUB_TOKEN}}
            #     script: |
            #       github.rest.issues.createComment({
            #         issue_number: context.issue.number,
            #         owner: context.repo.owner,
            #         repo: context.repo.repo,
            #         body: 'ðŸ‘‹ Thanks for reporting!'
            #       })

            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v2
              with:
                fetch-depth: 0

            - name: 'Read PR Body'
              env:
                # The pull request body is available through the github context object
                # we put the body of the pull request in an env variable (only available to this step)
                PR_BODY: ${{github.event.pull_request.body}}

              # Here we print the content of the environment variable and
              # pipe to a a text file.

              # Then we call the local script parsePR.js, which will create
              # a new file called testsToRun.txt. This file will have the list
              # of tests to run separated by a comma

              # Finally, we add the list of tests to the $GITHUB_ENV variable
              # as this allows us to reference the list in a subsequent step.  If you
              # were using a normal env variable, its value would not be available outside this step.
              run: |
                  echo $PR_BODY > ./pr_body.txt
                  node ./parsePR.js              
                  TESTS=$(cat testsToRun.txt)
                  echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV

            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version
            # install SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
            - name: 'Installing sfdx git delta'
              run: | 
                  echo y | sfdx plugins:install sfdx-git-delta
                  sfdx plugins 
            # Install java
            - name: 'Installing java'
              run: sudo apt-get install openjdk-8-jdk

            # Install SFDX scanner
            - name: 'Installing SFDX scanner'
              run: sfdx plugins:install @salesforce/sfdx-scanner

            # Authenticate to org using the URL stored in the text file
            - name: 'Authenticate to Dev Org'
              run: sfdx auth:jwt:grant --instanceurl "https://login.salesforce.com" --clientid "3MVG9Ud3b0C7KnnhdTRgFNnT63aq5gW_bBcLefB7ckqfdvHBBH9zTcG5Z_q68PkahQhIfJWJobtKIpmB3j0xX" --username "saikiran.salla@cunning-fox-8pcpg0.com" --jwtkeyfile key/server.key --setalias DEV

            # We use SFDX Git Delta to create a directory with only the metadata that has changed, this allows us
            # to deploy only those changes, as opposed to deploying the entire branch. This helps reducing deployment times
            - name: 'Create delta packages for new, modified or deleted metadata'
              run: | 
                  mkdir changed-sources
                  sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/ 
            # Scan the code in the delta directory by using sfdx scanner. Output the results of the scan in a new file
            # called apexScanResults.sarif
            - name: 'Scan code'
              run: |
                  cd changed-sources
                  sfdx scanner:run --format sarif --target './**/*.cls' --category "Design,Best Practices,Performance" --outfile 'apexScanResults.sarif'  
                  cd ..
            - name: Upload SARIF file
              uses: github/codeql-action/upload-sarif@v1
              with:
                sarif_file: changed-sources/apexScanResults.sarif

            # We do a check-only depploy and we only run the tests specified in the PR
            # If the env variable does not equal 'all', we know that there is a list of
            # tests that can be run
            # - name: 'Check-only deploy delta changes - run specified tests'
            #   if: ${{ env.APEX_TESTS != 'all' }}
            #   run: |
            #       echo ${{env.APEX_TESTS}}
            #       sfdx force:source:deploy -p "changed-sources/force-app" --checkonly --testlevel RunSpecifiedTests --runtests ${{env.APEX_TESTS}} --json
            # # We do a check-only deploy and we run all tests
            # - name: 'Check-only deploy delta changes - run all tests'
            #   if: ${{ env.APEX_TESTS == 'all' }}
            #   run: |
            #       sfdx force:source:deploy -p "changed-sources/force-app" --checkonly --testlevel RunLocalTests  --json
            # - name: 'Deploy destructive changes (if any)'
            #   run: sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings 

            #- name: 'Check-only deploy delta changes - run specified tests'
            #  run: sfdx force:source:deploy -p "changed-sources/force-app" --checkonly --targetusername DEV --testlevel RunLocalTests

            - name: 'Check-only deploy delta changes - run specified tests'
              if: ${{ env.APEX_TESTS != 'all' }}
              run: |
                  echo ${{env.APEX_TESTS}}
                  sfdx force:source:deploy -p "changed-sources/force-app" --checkonly --targetusername DEV --testlevel RunSpecifiedTests --runtests ${{env.APEX_TESTS}} --json
            # If the env variable equals all, we run all tests
            - name: 'Check-only deploy delta changes - run all tests'
              if: ${{ env.APEX_TESTS == 'all' }}
              run: |
                  sfdx force:source:deploy -p "changed-sources/force-app" --checkonly --targetusername DEV --testlevel RunLocalTests  --json
            - name: 'Deploy destructive changes (if any)'
              run: sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings --targetusername DEV